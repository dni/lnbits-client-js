/**
 * lnbits
 * API for LNbits, the free and open source bitcoin wallet and accounts system with plugins.
 *
 * The version of the OpenAPI document: 0.10.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConversionData from '../model/ConversionData';
import CreateExtension from '../model/CreateExtension';
import CreateInvoiceData from '../model/CreateInvoiceData';
import CreateLNURLData from '../model/CreateLNURLData';
import CreateLnurlAuth from '../model/CreateLnurlAuth';
import CreateTopup from '../model/CreateTopup';
import DecodePayment from '../model/DecodePayment';
import EditableSettings from '../model/EditableSettings';
import HTTPValidationError from '../model/HTTPValidationError';
import Page from '../model/Page';
import Payment from '../model/Payment';

/**
* Core service.
* @module api/CoreApi
* @version 0.10.9
*/
export default class CoreApi {

    /**
    * Constructs a new CoreApi. 
    * @alias module:api/CoreApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiDeleteSettingsAdminApiV1SettingsDelete operation.
     * @callback module:api/CoreApi~apiDeleteSettingsAdminApiV1SettingsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Api Delete Settings
     * @param {String} usr 
     * @param {module:api/CoreApi~apiDeleteSettingsAdminApiV1SettingsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    apiDeleteSettingsAdminApiV1SettingsDelete(usr, callback) {
      let postBody = null;
      // verify the required parameter 'usr' is set
      if (usr === undefined || usr === null) {
        throw new Error("Missing the required parameter 'usr' when calling apiDeleteSettingsAdminApiV1SettingsDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'usr': usr
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/admin/api/v1/settings/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDownloadBackupAdminApiV1BackupGet operation.
     * @callback module:api/CoreApi~apiDownloadBackupAdminApiV1BackupGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Api Download Backup
     * @param {String} usr 
     * @param {module:api/CoreApi~apiDownloadBackupAdminApiV1BackupGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDownloadBackupAdminApiV1BackupGet(usr, callback) {
      let postBody = null;
      // verify the required parameter 'usr' is set
      if (usr === undefined || usr === null) {
        throw new Error("Missing the required parameter 'usr' when calling apiDownloadBackupAdminApiV1BackupGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'usr': usr
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/admin/api/v1/backup/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiFiatAsSatsApiV1ConversionPost operation.
     * @callback module:api/CoreApi~apiFiatAsSatsApiV1ConversionPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Api Fiat As Sats
     * @param {module:model/ConversionData} conversionData 
     * @param {module:api/CoreApi~apiFiatAsSatsApiV1ConversionPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    apiFiatAsSatsApiV1ConversionPost(conversionData, callback) {
      let postBody = conversionData;
      // verify the required parameter 'conversionData' is set
      if (conversionData === undefined || conversionData === null) {
        throw new Error("Missing the required parameter 'conversionData' when calling apiFiatAsSatsApiV1ConversionPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/conversion', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiGetSettingsAdminApiV1SettingsGet operation.
     * @callback module:api/CoreApi~apiGetSettingsAdminApiV1SettingsGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Api Get Settings
     * @param {String} usr 
     * @param {module:api/CoreApi~apiGetSettingsAdminApiV1SettingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    apiGetSettingsAdminApiV1SettingsGet(usr, callback) {
      let postBody = null;
      // verify the required parameter 'usr' is set
      if (usr === undefined || usr === null) {
        throw new Error("Missing the required parameter 'usr' when calling apiGetSettingsAdminApiV1SettingsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'usr': usr
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/admin/api/v1/settings/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiInstallExtensionApiV1ExtensionPost operation.
     * @callback module:api/CoreApi~apiInstallExtensionApiV1ExtensionPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Api Install Extension
     * @param {String} usr 
     * @param {module:model/CreateExtension} createExtension 
     * @param {module:api/CoreApi~apiInstallExtensionApiV1ExtensionPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    apiInstallExtensionApiV1ExtensionPost(usr, createExtension, callback) {
      let postBody = createExtension;
      // verify the required parameter 'usr' is set
      if (usr === undefined || usr === null) {
        throw new Error("Missing the required parameter 'usr' when calling apiInstallExtensionApiV1ExtensionPost");
      }
      // verify the required parameter 'createExtension' is set
      if (createExtension === undefined || createExtension === null) {
        throw new Error("Missing the required parameter 'createExtension' when calling apiInstallExtensionApiV1ExtensionPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'usr': usr
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/extension', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiListCurrenciesAvailableApiV1CurrenciesGet operation.
     * @callback module:api/CoreApi~apiListCurrenciesAvailableApiV1CurrenciesGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Api List Currencies Available
     * @param {module:api/CoreApi~apiListCurrenciesAvailableApiV1CurrenciesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    apiListCurrenciesAvailableApiV1CurrenciesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/currencies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiLnurlscanApiV1LnurlscanCodeGet operation.
     * @callback module:api/CoreApi~apiLnurlscanApiV1LnurlscanCodeGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Api Lnurlscan
     * @param {String} code 
     * @param {module:api/CoreApi~apiLnurlscanApiV1LnurlscanCodeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    apiLnurlscanApiV1LnurlscanCodeGet(code, callback) {
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling apiLnurlscanApiV1LnurlscanCodeGet");
      }

      let pathParams = {
        'code': code
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader', 'APIKeyQuery'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/lnurlscan/{code}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPaymentApiV1PaymentsPaymentHashGet operation.
     * @callback module:api/CoreApi~apiPaymentApiV1PaymentsPaymentHashGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Api Payment
     * @param {Object} paymentHash 
     * @param {Object} opts Optional parameters
     * @param {String} [xApiKey] 
     * @param {module:api/CoreApi~apiPaymentApiV1PaymentsPaymentHashGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    apiPaymentApiV1PaymentsPaymentHashGet(paymentHash, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'paymentHash' is set
      if (paymentHash === undefined || paymentHash === null) {
        throw new Error("Missing the required parameter 'paymentHash' when calling apiPaymentApiV1PaymentsPaymentHashGet");
      }

      let pathParams = {
        'payment_hash': paymentHash
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Api-Key': opts['xApiKey']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/payments/{payment_hash}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPaymentsCreateApiV1PaymentsPost operation.
     * @callback module:api/CoreApi~apiPaymentsCreateApiV1PaymentsPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Api Payments Create
     * @param {module:model/CreateInvoiceData} createInvoiceData 
     * @param {module:api/CoreApi~apiPaymentsCreateApiV1PaymentsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    apiPaymentsCreateApiV1PaymentsPost(createInvoiceData, callback) {
      let postBody = createInvoiceData;
      // verify the required parameter 'createInvoiceData' is set
      if (createInvoiceData === undefined || createInvoiceData === null) {
        throw new Error("Missing the required parameter 'createInvoiceData' when calling apiPaymentsCreateApiV1PaymentsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader', 'APIKeyQuery'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/payments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPaymentsDecodeApiV1PaymentsDecodePost operation.
     * @callback module:api/CoreApi~apiPaymentsDecodeApiV1PaymentsDecodePostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Api Payments Decode
     * @param {module:model/DecodePayment} decodePayment 
     * @param {module:api/CoreApi~apiPaymentsDecodeApiV1PaymentsDecodePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    apiPaymentsDecodeApiV1PaymentsDecodePost(decodePayment, callback) {
      let postBody = decodePayment;
      // verify the required parameter 'decodePayment' is set
      if (decodePayment === undefined || decodePayment === null) {
        throw new Error("Missing the required parameter 'decodePayment' when calling apiPaymentsDecodeApiV1PaymentsDecodePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/payments/decode', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPaymentsPayLnurlApiV1PaymentsLnurlPost operation.
     * @callback module:api/CoreApi~apiPaymentsPayLnurlApiV1PaymentsLnurlPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Api Payments Pay Lnurl
     * @param {module:model/CreateLNURLData} createLNURLData 
     * @param {module:api/CoreApi~apiPaymentsPayLnurlApiV1PaymentsLnurlPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    apiPaymentsPayLnurlApiV1PaymentsLnurlPost(createLNURLData, callback) {
      let postBody = createLNURLData;
      // verify the required parameter 'createLNURLData' is set
      if (createLNURLData === undefined || createLNURLData === null) {
        throw new Error("Missing the required parameter 'createLNURLData' when calling apiPaymentsPayLnurlApiV1PaymentsLnurlPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader', 'APIKeyQuery'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/payments/lnurl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPaymentsSseApiV1PaymentsSseGet operation.
     * @callback module:api/CoreApi~apiPaymentsSseApiV1PaymentsSseGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Api Payments Sse
     * @param {module:api/CoreApi~apiPaymentsSseApiV1PaymentsSseGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    apiPaymentsSseApiV1PaymentsSseGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader', 'APIKeyQuery'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/payments/sse', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPerformLnurlauthApiV1LnurlauthPost operation.
     * @callback module:api/CoreApi~apiPerformLnurlauthApiV1LnurlauthPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Api Perform Lnurlauth
     * @param {module:model/CreateLnurlAuth} createLnurlAuth 
     * @param {module:api/CoreApi~apiPerformLnurlauthApiV1LnurlauthPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    apiPerformLnurlauthApiV1LnurlauthPost(createLnurlAuth, callback) {
      let postBody = createLnurlAuth;
      // verify the required parameter 'createLnurlAuth' is set
      if (createLnurlAuth === undefined || createLnurlAuth === null) {
        throw new Error("Missing the required parameter 'createLnurlAuth' when calling apiPerformLnurlauthApiV1LnurlauthPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader', 'APIKeyQuery'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/lnurlauth', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicPaymentLongpollingPublicV1PaymentPaymentHashGet operation.
     * @callback module:api/CoreApi~apiPublicPaymentLongpollingPublicV1PaymentPaymentHashGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Api Public Payment Longpolling
     * @param {Object} paymentHash 
     * @param {module:api/CoreApi~apiPublicPaymentLongpollingPublicV1PaymentPaymentHashGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    apiPublicPaymentLongpollingPublicV1PaymentPaymentHashGet(paymentHash, callback) {
      let postBody = null;
      // verify the required parameter 'paymentHash' is set
      if (paymentHash === undefined || paymentHash === null) {
        throw new Error("Missing the required parameter 'paymentHash' when calling apiPublicPaymentLongpollingPublicV1PaymentPaymentHashGet");
      }

      let pathParams = {
        'payment_hash': paymentHash
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/public/v1/payment/{payment_hash}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRestartServerAdminApiV1RestartGet operation.
     * @callback module:api/CoreApi~apiRestartServerAdminApiV1RestartGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Api Restart Server
     * @param {String} usr 
     * @param {module:api/CoreApi~apiRestartServerAdminApiV1RestartGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    apiRestartServerAdminApiV1RestartGet(usr, callback) {
      let postBody = null;
      // verify the required parameter 'usr' is set
      if (usr === undefined || usr === null) {
        throw new Error("Missing the required parameter 'usr' when calling apiRestartServerAdminApiV1RestartGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'usr': usr
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/admin/api/v1/restart/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUninstallExtensionApiV1ExtensionExtIdDelete operation.
     * @callback module:api/CoreApi~apiUninstallExtensionApiV1ExtensionExtIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Api Uninstall Extension
     * @param {String} extId 
     * @param {String} usr 
     * @param {module:api/CoreApi~apiUninstallExtensionApiV1ExtensionExtIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    apiUninstallExtensionApiV1ExtensionExtIdDelete(extId, usr, callback) {
      let postBody = null;
      // verify the required parameter 'extId' is set
      if (extId === undefined || extId === null) {
        throw new Error("Missing the required parameter 'extId' when calling apiUninstallExtensionApiV1ExtensionExtIdDelete");
      }
      // verify the required parameter 'usr' is set
      if (usr === undefined || usr === null) {
        throw new Error("Missing the required parameter 'usr' when calling apiUninstallExtensionApiV1ExtensionExtIdDelete");
      }

      let pathParams = {
        'ext_id': extId
      };
      let queryParams = {
        'usr': usr
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/extension/{ext_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUpdateSettingsAdminApiV1SettingsPut operation.
     * @callback module:api/CoreApi~apiUpdateSettingsAdminApiV1SettingsPutCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Api Update Settings
     * @param {String} usr 
     * @param {module:model/EditableSettings} editableSettings 
     * @param {module:api/CoreApi~apiUpdateSettingsAdminApiV1SettingsPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    apiUpdateSettingsAdminApiV1SettingsPut(usr, editableSettings, callback) {
      let postBody = editableSettings;
      // verify the required parameter 'usr' is set
      if (usr === undefined || usr === null) {
        throw new Error("Missing the required parameter 'usr' when calling apiUpdateSettingsAdminApiV1SettingsPut");
      }
      // verify the required parameter 'editableSettings' is set
      if (editableSettings === undefined || editableSettings === null) {
        throw new Error("Missing the required parameter 'editableSettings' when calling apiUpdateSettingsAdminApiV1SettingsPut");
      }

      let pathParams = {
      };
      let queryParams = {
        'usr': usr
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/admin/api/v1/settings/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUpdateWalletApiV1WalletNewNamePut operation.
     * @callback module:api/CoreApi~apiUpdateWalletApiV1WalletNewNamePutCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Api Update Wallet
     * @param {String} newName 
     * @param {module:api/CoreApi~apiUpdateWalletApiV1WalletNewNamePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    apiUpdateWalletApiV1WalletNewNamePut(newName, callback) {
      let postBody = null;
      // verify the required parameter 'newName' is set
      if (newName === undefined || newName === null) {
        throw new Error("Missing the required parameter 'newName' when calling apiUpdateWalletApiV1WalletNewNamePut");
      }

      let pathParams = {
        'new_name': newName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader', 'APIKeyQuery'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/wallet/{new_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiWalletApiV1WalletGet operation.
     * @callback module:api/CoreApi~apiWalletApiV1WalletGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Api Wallet
     * @param {module:api/CoreApi~apiWalletApiV1WalletGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    apiWalletApiV1WalletGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader', 'APIKeyQuery'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/wallet', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the auditAdminApiV1AuditGet operation.
     * @callback module:api/CoreApi~auditAdminApiV1AuditGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Audit
     * show the current balance of the node and the LNbits database
     * @param {String} usr 
     * @param {module:api/CoreApi~auditAdminApiV1AuditGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    auditAdminApiV1AuditGet(usr, callback) {
      let postBody = null;
      // verify the required parameter 'usr' is set
      if (usr === undefined || usr === null) {
        throw new Error("Missing the required parameter 'usr' when calling auditAdminApiV1AuditGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'usr': usr
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/admin/api/v1/audit', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExtensionDbApiV1ExtensionExtIdDbDelete operation.
     * @callback module:api/CoreApi~deleteExtensionDbApiV1ExtensionExtIdDbDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Extension Db
     * @param {String} extId 
     * @param {String} usr 
     * @param {module:api/CoreApi~deleteExtensionDbApiV1ExtensionExtIdDbDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteExtensionDbApiV1ExtensionExtIdDbDelete(extId, usr, callback) {
      let postBody = null;
      // verify the required parameter 'extId' is set
      if (extId === undefined || extId === null) {
        throw new Error("Missing the required parameter 'extId' when calling deleteExtensionDbApiV1ExtensionExtIdDbDelete");
      }
      // verify the required parameter 'usr' is set
      if (usr === undefined || usr === null) {
        throw new Error("Missing the required parameter 'usr' when calling deleteExtensionDbApiV1ExtensionExtIdDbDelete");
      }

      let pathParams = {
        'ext_id': extId
      };
      let queryParams = {
        'usr': usr
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/extension/{ext_id}/db', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExtensionReleaseApiV1ExtensionReleaseOrgRepoTagNameGet operation.
     * @callback module:api/CoreApi~getExtensionReleaseApiV1ExtensionReleaseOrgRepoTagNameGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Extension Release
     * @param {String} org 
     * @param {String} repo 
     * @param {String} tagName 
     * @param {String} usr 
     * @param {module:api/CoreApi~getExtensionReleaseApiV1ExtensionReleaseOrgRepoTagNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getExtensionReleaseApiV1ExtensionReleaseOrgRepoTagNameGet(org, repo, tagName, usr, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling getExtensionReleaseApiV1ExtensionReleaseOrgRepoTagNameGet");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling getExtensionReleaseApiV1ExtensionReleaseOrgRepoTagNameGet");
      }
      // verify the required parameter 'tagName' is set
      if (tagName === undefined || tagName === null) {
        throw new Error("Missing the required parameter 'tagName' when calling getExtensionReleaseApiV1ExtensionReleaseOrgRepoTagNameGet");
      }
      // verify the required parameter 'usr' is set
      if (usr === undefined || usr === null) {
        throw new Error("Missing the required parameter 'usr' when calling getExtensionReleaseApiV1ExtensionReleaseOrgRepoTagNameGet");
      }

      let pathParams = {
        'org': org,
        'repo': repo,
        'tag_name': tagName
      };
      let queryParams = {
        'usr': usr
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/extension/release/{org}/{repo}/{tag_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExtensionReleasesApiV1ExtensionExtIdReleasesGet operation.
     * @callback module:api/CoreApi~getExtensionReleasesApiV1ExtensionExtIdReleasesGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Extension Releases
     * @param {String} extId 
     * @param {String} usr 
     * @param {module:api/CoreApi~getExtensionReleasesApiV1ExtensionExtIdReleasesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getExtensionReleasesApiV1ExtensionExtIdReleasesGet(extId, usr, callback) {
      let postBody = null;
      // verify the required parameter 'extId' is set
      if (extId === undefined || extId === null) {
        throw new Error("Missing the required parameter 'extId' when calling getExtensionReleasesApiV1ExtensionExtIdReleasesGet");
      }
      // verify the required parameter 'usr' is set
      if (usr === undefined || usr === null) {
        throw new Error("Missing the required parameter 'usr' when calling getExtensionReleasesApiV1ExtensionExtIdReleasesGet");
      }

      let pathParams = {
        'ext_id': extId
      };
      let queryParams = {
        'usr': usr
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/extension/{ext_id}/releases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the healthApiV1HealthGet operation.
     * @callback module:api/CoreApi~healthApiV1HealthGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Health
     * @param {module:api/CoreApi~healthApiV1HealthGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    healthApiV1HealthGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/health', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the imgApiV1QrcodeDataGet operation.
     * @callback module:api/CoreApi~imgApiV1QrcodeDataGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Img
     * @param {Object} data 
     * @param {module:api/CoreApi~imgApiV1QrcodeDataGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    imgApiV1QrcodeDataGet(data, callback) {
      let postBody = null;
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling imgApiV1QrcodeDataGet");
      }

      let pathParams = {
        'data': data
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/qrcode/{data}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentListApiV1PaymentsGet operation.
     * @callback module:api/CoreApi~paymentListApiV1PaymentsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Payment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get list of payments
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] 
     * @param {Number} [offset] 
     * @param {String} [sortby] 
     * @param {module:model/String} [direction] 
     * @param {String} [search] Text based search
     * @param {String} [checkingId] Supports Filtering
     * @param {Number} [amount] Supports Filtering. Supports Search
     * @param {Number} [fee] Supports Filtering
     * @param {String} [memo] Supports Filtering. Supports Search
     * @param {Date} [time] Supports Filtering
     * @param {String} [bolt11] Supports Filtering
     * @param {String} [preimage] Supports Filtering
     * @param {String} [paymentHash] Supports Filtering
     * @param {Date} [expiry] Supports Filtering
     * @param {Object.<String, Object>} [extra] Supports Filtering. Nested attributes can be filtered too, e.g. `extra.[additional].[attributes]`
     * @param {String} [walletId] Supports Filtering
     * @param {String} [webhook] Supports Filtering
     * @param {Number} [webhookStatus] Supports Filtering
     * @param {module:api/CoreApi~paymentListApiV1PaymentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Payment>}
     */
    paymentListApiV1PaymentsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sortby': opts['sortby'],
        'direction': opts['direction'],
        'search': opts['search'],
        'checking_id': opts['checkingId'],
        'amount': opts['amount'],
        'fee': opts['fee'],
        'memo': opts['memo'],
        'time': opts['time'],
        'bolt11': opts['bolt11'],
        'preimage': opts['preimage'],
        'payment_hash': opts['paymentHash'],
        'expiry': opts['expiry'],
        'extra': opts['extra'],
        'wallet_id': opts['walletId'],
        'webhook': opts['webhook'],
        'webhook_status': opts['webhookStatus']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader', 'APIKeyQuery'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Payment];
      return this.apiClient.callApi(
        '/api/v1/payments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentListApiV1PaymentsPaginatedGet operation.
     * @callback module:api/CoreApi~paymentListApiV1PaymentsPaginatedGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Page} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get paginated list of payments
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] 
     * @param {Number} [offset] 
     * @param {String} [sortby] 
     * @param {module:model/String} [direction] 
     * @param {String} [search] Text based search
     * @param {String} [checkingId] Supports Filtering
     * @param {Number} [amount] Supports Filtering. Supports Search
     * @param {Number} [fee] Supports Filtering
     * @param {String} [memo] Supports Filtering. Supports Search
     * @param {Date} [time] Supports Filtering
     * @param {String} [bolt11] Supports Filtering
     * @param {String} [preimage] Supports Filtering
     * @param {String} [paymentHash] Supports Filtering
     * @param {Date} [expiry] Supports Filtering
     * @param {Object.<String, Object>} [extra] Supports Filtering. Nested attributes can be filtered too, e.g. `extra.[additional].[attributes]`
     * @param {String} [walletId] Supports Filtering
     * @param {String} [webhook] Supports Filtering
     * @param {Number} [webhookStatus] Supports Filtering
     * @param {module:api/CoreApi~paymentListApiV1PaymentsPaginatedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Page}
     */
    paymentListApiV1PaymentsPaginatedGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sortby': opts['sortby'],
        'direction': opts['direction'],
        'search': opts['search'],
        'checking_id': opts['checkingId'],
        'amount': opts['amount'],
        'fee': opts['fee'],
        'memo': opts['memo'],
        'time': opts['time'],
        'bolt11': opts['bolt11'],
        'preimage': opts['preimage'],
        'payment_hash': opts['paymentHash'],
        'expiry': opts['expiry'],
        'extra': opts['extra'],
        'wallet_id': opts['walletId'],
        'webhook': opts['webhook'],
        'webhook_status': opts['webhookStatus']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader', 'APIKeyQuery'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Page;
      return this.apiClient.callApi(
        '/api/v1/payments/paginated', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tinyurlApiV1TinyurlPost operation.
     * @callback module:api/CoreApi~tinyurlApiV1TinyurlPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tinyurl
     * creates a tinyurl
     * @param {String} url 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [endless = false)] 
     * @param {module:api/CoreApi~tinyurlApiV1TinyurlPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tinyurlApiV1TinyurlPost(url, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling tinyurlApiV1TinyurlPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'url': url,
        'endless': opts['endless']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader', 'APIKeyQuery'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/tinyurl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tinyurlApiV1TinyurlTinyurlIdDelete operation.
     * @callback module:api/CoreApi~tinyurlApiV1TinyurlTinyurlIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tinyurl
     * delete a tinyurl by id
     * @param {String} tinyurlId 
     * @param {module:api/CoreApi~tinyurlApiV1TinyurlTinyurlIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tinyurlApiV1TinyurlTinyurlIdDelete(tinyurlId, callback) {
      let postBody = null;
      // verify the required parameter 'tinyurlId' is set
      if (tinyurlId === undefined || tinyurlId === null) {
        throw new Error("Missing the required parameter 'tinyurlId' when calling tinyurlApiV1TinyurlTinyurlIdDelete");
      }

      let pathParams = {
        'tinyurl_id': tinyurlId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader', 'APIKeyQuery'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/tinyurl/{tinyurl_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tinyurlApiV1TinyurlTinyurlIdGet operation.
     * @callback module:api/CoreApi~tinyurlApiV1TinyurlTinyurlIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tinyurl
     * get a tinyurl by id
     * @param {String} tinyurlId 
     * @param {module:api/CoreApi~tinyurlApiV1TinyurlTinyurlIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tinyurlApiV1TinyurlTinyurlIdGet(tinyurlId, callback) {
      let postBody = null;
      // verify the required parameter 'tinyurlId' is set
      if (tinyurlId === undefined || tinyurlId === null) {
        throw new Error("Missing the required parameter 'tinyurlId' when calling tinyurlApiV1TinyurlTinyurlIdGet");
      }

      let pathParams = {
        'tinyurl_id': tinyurlId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader', 'APIKeyQuery'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/tinyurl/{tinyurl_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tinyurlTTinyurlIdGet operation.
     * @callback module:api/CoreApi~tinyurlTTinyurlIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tinyurl
     * redirects a tinyurl by id
     * @param {String} tinyurlId 
     * @param {module:api/CoreApi~tinyurlTTinyurlIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tinyurlTTinyurlIdGet(tinyurlId, callback) {
      let postBody = null;
      // verify the required parameter 'tinyurlId' is set
      if (tinyurlId === undefined || tinyurlId === null) {
        throw new Error("Missing the required parameter 'tinyurlId' when calling tinyurlTTinyurlIdGet");
      }

      let pathParams = {
        'tinyurl_id': tinyurlId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/t/{tinyurl_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the topupAdminApiV1TopupPut operation.
     * @callback module:api/CoreApi~topupAdminApiV1TopupPutCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Topup
     * @param {String} usr 
     * @param {module:model/CreateTopup} createTopup 
     * @param {module:api/CoreApi~topupAdminApiV1TopupPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    topupAdminApiV1TopupPut(usr, createTopup, callback) {
      let postBody = createTopup;
      // verify the required parameter 'usr' is set
      if (usr === undefined || usr === null) {
        throw new Error("Missing the required parameter 'usr' when calling topupAdminApiV1TopupPut");
      }
      // verify the required parameter 'createTopup' is set
      if (createTopup === undefined || createTopup === null) {
        throw new Error("Missing the required parameter 'createTopup' when calling topupAdminApiV1TopupPut");
      }

      let pathParams = {
      };
      let queryParams = {
        'usr': usr
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/admin/api/v1/topup/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the websocketUpdateGetApiV1WsItemIdDataGet operation.
     * @callback module:api/CoreApi~websocketUpdateGetApiV1WsItemIdDataGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Websocket Update Get
     * @param {String} itemId 
     * @param {String} data 
     * @param {module:api/CoreApi~websocketUpdateGetApiV1WsItemIdDataGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    websocketUpdateGetApiV1WsItemIdDataGet(itemId, data, callback) {
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling websocketUpdateGetApiV1WsItemIdDataGet");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling websocketUpdateGetApiV1WsItemIdDataGet");
      }

      let pathParams = {
        'item_id': itemId,
        'data': data
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/ws/{item_id}/{data}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the websocketUpdatePostApiV1WsItemIdPost operation.
     * @callback module:api/CoreApi~websocketUpdatePostApiV1WsItemIdPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Websocket Update Post
     * @param {String} itemId 
     * @param {String} data 
     * @param {module:api/CoreApi~websocketUpdatePostApiV1WsItemIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    websocketUpdatePostApiV1WsItemIdPost(itemId, data, callback) {
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling websocketUpdatePostApiV1WsItemIdPost");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling websocketUpdatePostApiV1WsItemIdPost");
      }

      let pathParams = {
        'item_id': itemId
      };
      let queryParams = {
        'data': data
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/ws/{item_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
